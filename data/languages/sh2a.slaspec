# Copyright (c) 2019 William Hahne
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE..

# Used http://www.shared-ptr.com/sh_insns.html as a reference

define endian=big;
define alignment=2;

@define SH2A ""

define space ram     type=ram_space      size=4  default;
define space register type=register_space size=1;

define register offset=0x00 size=4 [ R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 ];
define register offset=0x80 size=1 [ BO CS M Q IMASK S T ]; # SR bits
define register offset=0x90 size=4 [ GBR VBR TBR ];
define register offset=0xa0 size=4 [ MACL MACH ];
define register offset=0xb0 size=4 [ PR PC ];

define token firstbyte (16)
	n1 = (12,15)

	n2 = (8,11)
	n2_reg = (8,11)

	n3 = (4,7)
	n3_reg = (4,7)
	n3_s = (4,7) signed
	n3_hi_bit = (7,7)
	n3_imm3 = (4,6)

	n4 = (0,3)
	n4_hi_bit = (3,3)
	n4_imm3 = (0,2)

	disp4 = (0,3)

	imm8_s = (0,7) signed
	imm12_s = (0,11) signed
	imm8 = (0,7)
	disp8 = (0,7);

define token secondbyte (16)
	n5 = (12,15)
	n6 = (8,11)
	n7 = (4,7)
	n8 = (0,3)
	disp12 = (0,11)
	imm16 = (0,15);

attach variables [ n2_reg n3_reg ] [ R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 ];

define pcodeop load_register_bank;
define pcodeop save_register_bank;
define pcodeop restore_register_bank;
define pcodeop prefetch_cache;
define pcodeop sleep;
define pcodeop trap;

rel_imm8: rel is imm8_s [ rel = (inst_next + 2 + imm8_s * 2); ] {
    export *[ram]:4 rel;
}

rel_imm12: rel is imm12_s [ rel = (inst_next + 2 + imm12_s * 2); ] {
    export *[ram]:4 rel;
}

rel_reg: rel is n2_reg [ rel = (inst_next + 2 + n2_reg); ] {
    export *[ram]:4 rel;
}

tbr_disp8: rel is disp8 [ rel = (TBR + disp8 << 2); ] {
    export *[ram]:4 rel;
}

pc_rell: rel is disp8 [ rel = ((inst_next - 2) & 0xFFFFFFFC) + 4 + (disp8 << 2); ]
{
	export *:4 rel;
}

pc_relw: rel is disp8 [ rel = ((inst_next - 2) + 4 + (disp8 << 1)); ]
{
	export *:2 rel;
}

# Move instructions

:mov n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0x3)
{
	n2_reg = n3_reg;
}

:mov "#"imm8_s,n2_reg is (n1=0xe & n2_reg & imm8_s)
{
	n2_reg = sext(imm8_s:1);
}

@if defined(SH2A)

:movi20 "#"imm20,n2_reg is (n1=0x0 & n2_reg & n3_s & n4=0x0); imm16 [ imm20=n3_s<<16 | imm16; ]
{
	n2_reg = imm20;
}

:movi20s "#"imm20,n2_reg is (n1=0x0 & n2_reg & n3_s & n4=0x1); imm16 [ imm20=n3_s<<16 | imm16; ]
{
	n2_reg = imm20 << 8;
}

@endif

:mova @(pc_rell),R0 is (n1=0xc & n2=0x7 & pc_rell & R0)
{
	R0 = pc_rell;
}

:mov.w @(pc_relw),n2_reg is (n1=0x9 & n2_reg & pc_relw) 
{
	n2_reg = sext(pc_relw);
}

:mov.l @(pc_rell),n2_reg is (n1=0xd & n2_reg & pc_rell)
{
	n2_reg = pc_rell;
}

:mov.b @n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0x0)
{
	n2_reg = sext(*:1 n3_reg);
}

:mov.w @n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0x1)
{
	n2_reg = sext(*:2 n3_reg);
}

:mov.l @n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0x2)
{
	n2_reg = *n3_reg;
}

:mov.b n3_reg,@n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0x0)
{
	*:1 n2_reg = n3_reg;
}

:mov.w n3_reg,@n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0x1)
{
	*:2 n2_reg = n3_reg;
}

:mov.l n3_reg,@n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0x2)
{
	*n2_reg = n3_reg;
}

:mov.b @n3_reg+,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0x4)
{
	n2_reg = sext(*:1 n3_reg);
	n3_reg = n3_reg + 1;
}

:mov.w @n3_reg+,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0x5)
{
	n2_reg = sext(*:2 n3_reg);
	n3_reg = n3_reg + 2;
}

:mov.l @n3_reg+,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0x6)
{
	n2_reg = *n3_reg;
	n3_reg = n3_reg + 4;
}

:mov.b n3_reg,@-n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0x4)
{
	n2_reg = n2_reg - 1;
	*:1 n2_reg = n3_reg;
}

:mov.w n3_reg,@-n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0x5)
{
	n2_reg = n2_reg - 2;
	*:2 n2_reg = n3_reg;
}

:mov.l n3_reg,@-n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0x6)
{
	n2_reg = n2_reg - 4;
	*n2_reg = n3_reg;
}

@if defined(SH2A)

:mov.b @-n2_reg,R0 is (n1=0x4 & n2_reg & n3=0xc & n4=0xb & R0)
{
	n2_reg = n2_reg - 1;
	R0 = sext(*:1 n2_reg);
}

:mov.w @-n2_reg,R0 is (n1=0x4 & n2_reg & n3=0xd & n4=0xb & R0)
{
	n2_reg = n2_reg - 2;
	R0 = sext(*:2 n2_reg);
}

:mov.l @-n2_reg,R0 is (n1=0x4 & n2_reg & n3=0xe & n4=0xb & R0)
{
	n2_reg = n2_reg - 4;
	R0 = *n2_reg;
}

:mov.b R0,@n2_reg+ is (n1=0x4 & n2_reg & n3=0x8 & n4=0xb & R0)
{
	*:1 n2_reg = R0;
	n2_reg = n2_reg + 1;
}

:mov.w R0,@n2_reg+ is (n1=0x4 & n2_reg & n3=0x9 & n4=0xb & R0)
{
	*:2 n2_reg = R0;
	n2_reg = n2_reg + 2;
}

:mov.l R0,@n2_reg+ is (n1=0x4 & n2_reg & n3=0xa & n4=0xb & R0)
{
	*n2_reg = R0;
	n2_reg = n2_reg + 4;
}

@endif

:mov.b @(disp4,n3_reg),R0 is (n1=0x8 & n2=0x4 & n3_reg & disp4 & R0)
{
	R0 = sext(*:1 (n3_reg + disp4));
}

@if defined(SH2A)

:mov.b @(disp12,n3_reg),n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x1); (n5=0x4 & disp12)
{
	n2_reg = sext(*:1 (n3_reg + disp12));
}

:mov.b @(disp12,n3_reg),n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x1); (n5=0x8 & disp12)
{
	n2_reg = zext(*:1 (n3_reg + disp12));
}

@endif

:mov.w @(disp4,n3_reg),R0 is (n1=0x8 & n2=0x5 & n3_reg & disp4 & R0)
{
	R0 = sext(*:2 (n3_reg + disp4));
}

@if defined(SH2A)

:mov.w @(disp12,n3_reg),n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x1); (n5=0x5 & disp12)
{
	n2_reg = sext(*:2 (n3_reg + disp12));
}

:mov.w @(disp12,n3_reg),n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x1); (n5=0x9 & disp12)
{
	n2_reg = zext(*:2 (n3_reg + disp12));
}

@endif

:mov.l @(disp4,n3_reg),n2_reg is (n1=0x5 & n2_reg & n3_reg & disp4)
{
	n2_reg = *(n3_reg + disp4);
}

@if defined(SH2A)

:mov.l @(disp12,n3_reg),n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x1); (n5=0x6 & disp12)
{
	n2_reg = *(n3_reg + disp12);
}

@endif

:mov.b R0,@(disp4,n3_reg) is (n1=0x8 & n2=0x0 & n3_reg & disp4 & R0)
{
	*:1 (n3_reg + disp4) = R0;
}

@if defined(SH2A)

:mov.b n3_reg,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_reg & n4=0x1); (n5=0x0 & disp12)
{
	*:1 (n2_reg + disp12) = n3_reg;
}

@endif

:mov.w R0,@(disp4,n3_reg) is (n1=0x8 & n2=0x1 & n3_reg & disp4 & R0)
{
	*:2 (n3_reg + disp4) = R0;
}

@if defined(SH2A)

:mov.w n3_reg,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_reg & n4=0x1); (n5=0x1 & disp12)
{
	*:2 (n2_reg + disp12) = n3_reg;
}

@endif

:mov.l n3_reg,@(disp4,n2_reg) is (n1=0x1 & n2_reg & n3_reg & disp4)
{
	*(n2_reg + disp4) = n3_reg;
}

@if defined(SH2A)

:mov.l n3_reg,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_reg & n4=0x1); (n5=0x2 & disp12)
{
	*(n2_reg + disp12) = n3_reg;
}

@endif

:mov.b @(R0,n3_reg),n2_reg is (n1=0x0 & n2_reg & n3_reg & n4=0xc & R0)
{
	n2_reg = sext(*:1 (n3_reg + R0));
}

:mov.w @(R0,n3_reg),n2_reg is (n1=0x0 & n2_reg & n3_reg & n4=0xd & R0)
{
	n2_reg = sext(*:2 (n3_reg + R0));
}

:mov.l @(R0,n3_reg),n2_reg is (n1=0x0 & n2_reg & n3_reg & n4=0xe & R0)
{
	n2_reg = *(n3_reg + R0);
}

:mov.b n3_reg,@(R0,n2_reg) is (n1=0x0 & n2_reg & n3_reg & n4=0x4 & R0)
{
	*:1 (n2_reg + R0) = n3_reg;
}

:mov.w n3_reg,@(R0,n2_reg) is (n1=0x0 & n2_reg & n3_reg & n4=0x5 & R0)
{
	*:2 (n2_reg + R0) = n3_reg;
}

:mov.l n3_reg,@(R0,n2_reg) is (n1=0x0 & n2_reg & n3_reg & n4=0x6 & R0)
{
	*(n2_reg + R0) = n3_reg;
}

:mov.b @(disp8,GBR),R0 is (n1=0xc & n2=0x4 & disp8 & R0 & GBR)
{
	R0 = sext(*:1 (GBR + disp8));
}

:mov.w @(disp8,GBR),R0 is (n1=0xc & n2=0x5 & disp8 & R0 & GBR)
{
	R0 = sext(*:2 (GBR + disp8));
}

:mov.l @(disp8,GBR),R0 is (n1=0xc & n2=0x6 & disp8 & R0 & GBR)
{
	R0 = *(GBR + disp8);
}

@if defined(SH4A)

:movco.l R0,@n2_reg is (n1=0x0 & n2_reg & n3=0x7 & n4=0x3)
{
	# unimplemented
}

:movli.l @n2_reg,R0 is (n1=0x0 & n2_reg & n3=0x6 & n4=0x3)
{
	# unimplemented
}

:movua.l @Rm,R0 is (n1=0x4 & n2_reg & n3=0xa & n4=0x9)
{
	# unimplemented
}

:movua.l @Rm+,R0 is (n1=0x4 & n2_reg & n3=0xe & n4=0x9)
{
	# unimplemented
}

@endif

@if defined(SH2A)

:movml.l n2_reg,@-R15 is (n1=0x4 & n2_reg & n3=0xf & n4=0x1 & R15)
{
	local i = n2_reg:1 + 1;
	<loop>
	if (i < 15) goto <else>;
	*(R15 - 4) = PR;
	goto <done>;
	<else>
	*(R15 - 4) = *[register]:4 ((i - 1) * 4);
	<done>

	R15 = R15 - 4;

	i = i - 1;
	if (i != 0) goto <loop>;
}

:movml.l @R15+,n2_reg is (n1=0x4 & n2_reg & n3=0xf & n4=0x5 & R15)
{
	local i:1 = 0;
	<loop>
	if (i < 15) goto <else>;
	PR = *R15;
	goto <done>;
	<else>
	*[register]:4 (i * 4) = *R15;
	<done>

	R15 = R15 + 4;

	i = i + 1;
	if (i <= n2_reg:1) goto <loop>;
}

:movmu.l n2_reg,@-R15 is (n1=0x4 & n2_reg & n3=0xf & n4=0x0 & R15)
{
	*(R15 - 4) = PR;

	local i = 15;
	<loop>
	*(R15 - 4) = *[register]:4 ((i - 1) * 4);

	R15 = R15 - 4;

	i = i - 1;
	if (i > n2_reg:1) goto <loop>;
}

:movmu.l @R15+,n2_reg is (n1=0x4 & n2_reg & n3=0xf & n4=0x4 & R15)
{
	local i = n2_reg:1;
	<loop>
	if (i > 14) goto <done>;
	*[register]:4 (i * 4) = *R15;
	R15 = R15 + 4;

	i = i + 1;
	goto <loop>;

	<done>
	PR = *R15;
	R15 = R15 + 4;
}

:movrt n2_reg is (n1=0x0 & n2_reg & n3=0x3 & n4=0x9)
{
	n2_reg = zext(!T);
}

@endif

:movt n2_reg is (n1=0x0 & n2_reg & n3=0x2 & n4=0x9)
{
	n2_reg = zext(T);
}

@if defined(SH2A)

:nott is (n1=0x0 & n2=0x0 & n3=0x6 & n4=0x8)
{
	T = !T;
}

@endif

:swap.b n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0x8)
{
	local temp0 = n3_reg & 0xFFFF0000;
	local temp1 = (n3_reg & 0x000000FF) << 8;
	n2_reg = (n3_reg & 0x0000FF00) >> 8;
	n3_reg = n2_reg | temp1 | temp0;
}

:swap.w n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0x9)
{
	local temp = (n3_reg >> 16) & 0x0000ffff;
	n2_reg = (n3_reg << 16) | temp;
}

:xtrct n3_reg,n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0xd)
{
	local high = (n3_reg << 16) & 0xFFFF0000;
	local low = (n2_reg >> 16) & 0x0000FFFF;
	n2_reg = high | low;
}

#
# Bit manipulation instructions
#

@if defined(SH2A)

:band.b "#"n3_imm3,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_hi_bit=0 & n3_imm3 & n4=0x9); (n5=0x4 & disp12)
{
	local temp:1 = *(n2_reg + disp12);
	local assignbit:1 = (1 << n3_imm3) & temp;

	T = (T != 0) && (assignbit != 0); 
}

:bandnot.b "#"n3_imm3,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_hi_bit=0 & n3_imm3 & n4=0x9); (n5=0xc & disp12)
{
	local temp:1 = *(n2_reg + disp12);
	local assignbit:1 = (1 << n3_imm3) & temp;

	T = !((T != 0) && (assignbit != 0)); 
}

:bclr.b "#"n3_imm3,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_hi_bit=0 & n3_imm3 & n4=0x9); (n5=0x0 & disp12)
{
	local temp:1 = *(n2_reg + disp12);

	*(n2_reg + disp12) = temp & ~(1 << n3_imm3);
}

:bclr "#"n4_imm3,n3_reg is (n1=0x8 & n2=0x6 & n3_reg & n4_hi_bit=0 & n4_imm3)
{
	n3_reg = n3_reg & ~(1 << n4_imm3);	
}

:bld.b "#"n3_imm3,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_hi_bit=0 & n3_imm3 & n4=0x9); (n5=0x3 & disp12)
{
	local temp:1 = *(n2_reg + disp12);
	local assignbit:1 = (1 << n3_imm3) & temp;

	T = (assignbit != 0); 
}

:bld "#"n4_imm3,n3_reg is (n1=0x8 & n2=0x7 & n3_reg & n4_hi_bit=1 & n4_imm3)
{
	T = (n3_reg & (1 << n4_imm3)) != 0;	
}

:bldnot.b "#"n3_imm3,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_hi_bit=0 & n3_imm3 & n4=0x9); (n5=0xb & disp12)
{
	local temp:1 = *(n2_reg + disp12);
	local assignbit:1 = (1 << n3_imm3) & temp;

	T = (assignbit == 0); 
}

:bor.b "#"n3_imm3,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_hi_bit=0 & n3_imm3 & n4=0x9); (n5=0x5 & disp12)
{
	local temp:1 = *(n2_reg + disp12);
	local assignbit:1 = (1 << n3_imm3) & temp;

	T = (T != 0) || (assignbit != 0); 
}

:bornot.b "#"n3_imm3,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_hi_bit=0 & n3_imm3 & n4=0x9); (n5=0xd & disp12)
{
	local temp:1 = *(n2_reg + disp12);
	local assignbit:1 = (1 << n3_imm3) & temp;

	T = !((T != 0) || (assignbit != 0)); 
}

:bset.b "#"n3_imm3,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_hi_bit=0 & n3_imm3 & n4=0x9); (n5=0x1 & disp12)
{
	local temp:1 = *(n2_reg + disp12);

	*(n2_reg + disp12) = temp | (1 << n3_imm3);
}

:bset "#"n4_imm3,n3_reg is (n1=0x8 & n2=0x6 & n3_reg & n4_hi_bit=1 & n4_imm3)
{
	n3_reg = n3_reg | (1 << n4_imm3);	
}

:bst.b "#"n3_imm3,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_hi_bit=0 & n3_imm3 & n4=0x9); (n5=0x2 & disp12)
{
	local temp:1 = *(n2_reg + disp12);

	*(n2_reg + disp12) = temp | (T << n3_imm3);
}

:bst "#"n4_imm3,n3_reg is (n1=0x8 & n2=0x7 & n3_reg & n4_hi_bit=0 & n4_imm3)
{
	local temp:4 = zext(T);
	n3_reg = n3_reg | (temp << n4_imm3);	
}

:bxor.b "#"n3_imm3,@(disp12,n2_reg) is (n1=0x3 & n2_reg & n3_hi_bit=0 & n3_imm3 & n4=0x9); (n5=0x6 & disp12)
{
	local temp:1 = *(n2_reg + disp12);
	local assignbit:1 = (1 << n3_imm3) & temp;

	T = (T != 0) ^^ (assignbit != 0); 
}

@endif

#
# Arithmatic Instructions
#

:add n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0xc)
{
	n2_reg = n2_reg + n3_reg;
}

:add "#"imm8_s,n2_reg is (n1=0x7 & n2_reg & imm8_s)
{
	n2_reg = n2_reg + imm8_s;
}

:addc n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0xe)
{
	local t_zext:4 = zext(T);
	local c = carry(n2_reg,n3_reg) || carry(n2_reg+n3_reg,t_zext);

	n2_reg = n2_reg + n3_reg + t_zext;
	T = c;
}

:addv n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0xf)
{
	local t_zext:4 = zext(T);
	local c = scarry(n2_reg,n3_reg) || scarry(n2_reg+n3_reg,t_zext);

	n2_reg = n2_reg + n3_reg + t_zext;
	T = c;
}

:cmp^"/eq" "#"imm8_s,R0 is (n1=0x8 & n2=0x8 & imm8_s & R0)
{
	T = imm8_s == R0;
}

:cmp^"/eq" n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x0)
{
	T = n2_reg == n3_reg;	
}

:cmp^"/hs" n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x2)
{
	T = n3_reg >= n2_reg;
}

:cmp^"/ge" n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x3)
{
	T = n3_reg s>= n2_reg;
}

:cmp^"/hi" n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x6)
{
	T = n3_reg > n2_reg;
}

:cmp^"/gt" n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x7)
{
	T = n3_reg s> n2_reg;
}

:cmp^"/pl" n2_reg is (n1=0x4 & n2_reg & n3=0x1 & n4=0x5)
{
	T = n2_reg s> 0;
}

:cmp^"/pz" n2_reg is (n1=0x4 & n2_reg & n3=0x1 & n4=0x1)
{
	T = n2_reg s>= 0;
}

:cmp^"/str" n3_reg,n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0xc) {
	local b0 = (n3_reg & 0xff000000) == (n2_reg & 0xff000000);
	local b1 = (n3_reg & 0x00ff0000) == (n2_reg & 0x00ff0000);
	local b2 = (n3_reg & 0x0000ff00) == (n2_reg & 0x0000ff00);
	local b3 = (n3_reg & 0x000000ff) == (n2_reg & 0x000000ff);

	T = b0 || b1 || b2 || b3;
}

:clips.b n2_reg is (n1=0x4 & n2_reg & n3=0x9 & n4=0x1)
{
	if (n2_reg <= 0x7f) goto <next>;
	n2_reg = 0x7f;
	CS = 1;
	goto <done>;
	<next>
	if (n2_reg >= 0xffffff80) goto <done>;
	n2_reg = 0xffffff80;
	CS = 1;
	<done>
}

:clips.w n2_reg is (n1=0x4 & n2_reg & n3=0x9 & n4=0x6)
{
	if (n2_reg <= 0x7fff) goto <next>;
	n2_reg = 0x7fff;
	CS = 1;
	goto <done>;
	<next>
	if (n2_reg >= 0xffff8000) goto <done>;
	n2_reg = 0xffff8000;
	CS = 1;
	<done>
}

:clipu.b n2_reg is (n1=0x4 & n2_reg & n3=0x8 & n4=0x1)
{
	if (n2_reg <= 0xff) goto <done>;
	n2_reg = 0xff;
	CS = 1;
	<done>
}

:clipu.w n2_reg is (n1=0x4 & n2_reg & n3=0x8 & n4=0x5)
{
	if (n2_reg <= 0xffff) goto <done>;
	n2_reg = 0xffff;
	CS = 1;
	<done>
}

:div0s n3_reg,n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0x7)
{
	Q = (n2_reg & 0x80000000) != 0;
	M = (n3_reg & 0x80000000) != 0;

	T = !(M == Q);
}

:div0u is (n1=0x0 & n2=0x0 & n3=0x1 & n4=0x9)
{
	M = 0;
	Q = 0;
	T = 0;
}

:div1 n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x4)
{
	local old_q = Q;
	Q = (0x80000000 & n2_reg) != 0;
	local tmp2 = n3_reg;
	local tmp0:4 = 0;
	local tmp1:1 = 0;
	n2_reg = n2_reg << 1;
	n2_reg = n2_reg | zext(T);

	if (old_q) goto <if_0_else>;
		if (M) goto <if_1_else>;
			tmp0 = n2_reg;
			n2_reg = n2_reg - tmp2;
			tmp1 = n2_reg > tmp0;

			if (Q) goto <if_2_else>;
				Q = tmp1;
				goto <if_2_end>;
			<if_2_else>
				Q = tmp1 == 0;
			<if_2_end>
			goto <if_1_end>;

		<if_1_else>
			tmp0 = n2_reg;
			n2_reg = n2_reg + tmp2;
			tmp1 = n2_reg < tmp0;

			if (Q) goto <if_3_else>;
				Q = tmp1 == 0;
				goto <if_1_end>;
			<if_3_else>
				Q = tmp1;
		<if_1_end>
		goto <if_0_end>;
	<if_0_else>
		if (M) goto <if_4_else>;
			tmp0 = n2_reg;
			n2_reg = n2_reg + tmp2;
			tmp1 = n2_reg < tmp0;

			if (Q) goto <if_5_else>;
				Q = tmp1;
				goto <if_5_end>;
			<if_5_else>
				Q = tmp1 == 0;
			<if_5_end>

			goto <if_4_end>;
		<if_4_else>
			tmp0 = n2_reg;
			n2_reg = n2_reg - tmp2;
			tmp1 = n2_reg > tmp0;

			if (Q) goto <if_6_else>;
				Q = tmp1 == 0;
				goto <if_0_end>;
			<if_6_else>
				Q = tmp1;
	<if_0_end>
}

@if defined(SH2A)

:divs R0,n2_reg is (n1=0x4 & n2_reg & n3=0x9 & n4=0x4 & R0)
{
	n2_reg = n2_reg s/ R0;
}

:divu R0,n2_reg is (n1=0x4 & n2_reg & n3=0x8 & n4=0x4 & R0)
{
	n2_reg = n2_reg / R0;
}

@endif

@if defined(SH2) || defined(SH2A) || defined(SH3) || defined(SH4) || defined(SH4A)

:dmuls.l n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0xd)
{
	local m:8 = sext(n3_reg);
	local n:8 = sext(n2_reg);

	local result = m * n;	

	MACH = result(4);
	MACL = result:4;
}

:dmulu.l n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x5)
{
	local m:8 = zext(n3_reg);
	local n:8 = zext(n2_reg);

	local result = m * n;	

	MACH = result(4);
	MACL = result:4;
}

:dt n2_reg is (n1=0x4 & n2_reg & n3=0x1 & n4=0x0)
{
	n2_reg = n2_reg - 1;

	T = n2_reg == 0;
}

@endif

:exts.b n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0xe)
{
	n2_reg = sext(n3_reg:1);
}

:exts.w n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0xf)
{
	n2_reg = sext(n3_reg:2);
}

:extu.b n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0xc)
{
	n2_reg = zext(n3_reg:1);
}

:extu.w n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0xd)
{
	n2_reg = zext(n3_reg:2);
}

@if defined(SH2) || defined(SH2A) || defined(SH3) || defined(SH4) || defined(SH4A)

:mac.l @n3_reg+,@n2_reg+ is (n1=0x0 & n2_reg & n3_reg & n4=0xf)
{
	local m:8 = sext(*:4 n3_reg);
	local n:8 = sext(*:4 n2_reg);

	local mac:8 = zext(MACL) | zext(MACH) << 32;

	local result = m * n + mac;

	if (!S) goto <dont_saturate>;
		result = sext(result:6);
	<dont_saturate>

	MACH = result(4);
	MACL = result:4;

	n3_reg = n3_reg + 4;
	n2_reg = n2_reg + 4;
}


@endif

:mac.w @n3_reg+,@n2_reg+ is (n1=0x4 & n2_reg & n3_reg & n4=0xf) 
{
	local m:8 = sext(*:2 n3_reg);
	local n:8 = sext(*:2 n2_reg);

	local mac:8 = zext(MACL) | zext(MACH) << 32;

	local result = m * n + mac;

	if (!S) goto <dont_saturate>;
		result = sext(result:4);
	<dont_saturate>

	MACH = result(4);
	MACL = result:4;

	n3_reg = n3_reg + 2;
	n2_reg = n2_reg + 2;
}

@if defined(SH2) || defined(SH2A) || defined(SH3) || defined(SH4) || defined(SH4A)

:mul.l n3_reg,n2_reg is (n1=0x0 & n2_reg & n3_reg & n4=0x7) 
{
	MACL = n2_reg * n3_reg;
}

@endif

@if defined(SH2A)

:mul.r R0,n2_reg is (n1=0x4 & n2_reg & n3=0x8 & n4=0x0 & R0)
{
	n2_reg = R0 * n2_reg;
}

@endif

:muls.w n3_reg,n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0xf) 
{
	local n:4 = sext(n2_reg:2);
	local m:4 = sext(n3_reg:2);

	MACL = n * m;
}

:mulu.w n3_reg,n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0xe) 
{
	local n:4 = zext(n2_reg:2);
	local m:4 = zext(n3_reg:2);

	MACL = n * m;
}

:neg n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0xb)
{
	n2_reg = 0 - n3_reg;
}

:negc n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0xa)
{
	local zext_t:4 = zext(T);
	local b0 = sborrow(n3_reg, zext_t);
	local b1 = sborrow(0, n3_reg - zext_t);

	n2_reg = 0 - n3_reg - zext_t;

	T = b0 || b1;
}

:sub n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0x8)
{
	n2_reg = n2_reg - n3_reg;
}

:subc n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0xa)
{
	local zext_t:4 = zext(T);
	local b0 = sborrow(n3_reg, zext_t);
	local b1 = sborrow(n2_reg, n3_reg - zext_t);

	n2_reg = n2_reg - n3_reg - zext_t;

	T = b0 || b1;
}

:subv n3_reg,n2_reg is (n1=0x3 & n2_reg & n3_reg & n4=0xb)
{
	local b = sborrow(n2_reg, n3_reg);

	n2_reg = n2_reg - n3_reg;

	T = b;
}

#
# Logic instructions
#

:and n3_reg,n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0x9)
{
	n2_reg = n2_reg & n3_reg;
}

:and "#"imm8,R0 is (n1=0xc & n2=0x9 & imm8 & R0)
{
	R0 = R0 & imm8;
}

:and.b "#"imm8,@(R0,GBR) is (n1=0xc & n2=0xd & imm8 & R0 & GBR)
{
	*:1 (R0 + GBR) = *:1 (R0 + GBR) & imm8;
}

:not n3_reg,n2_reg is (n1=0x6 & n2_reg & n3_reg & n4=0x7)
{
	n2_reg = ~n3_reg;
}

:or n3_reg,n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0xb)
{
	n2_reg = n2_reg | n3_reg;
}

:or "#"imm8,R0 is (n1=0xc & n2=0xb & imm8 & R0)
{
	R0 = R0 | imm8;
}

:or.b "#"imm8,@(R0,GBR) is (n1=0xc & n2=0xf & imm8 & R0 & GBR)
{
	*:1 (R0 + GBR) = *:1 (R0 + GBR) | imm8;
}

:tas.b n2_reg is (n1=0x4 & n2_reg & n3=0x1 & n4=0xb)
{
	local tmp = *:1 n2_reg;

	T = tmp == 0;

	*:1 n2_reg = tmp | 0x80;
}

:tst n3_reg,n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0x8)
{
	T = (n2_reg & n3_reg) == 0;
}

:tst "#"imm8,R0 is (n1=0xc & n2=0x8 & imm8 & R0)
{
	T = (R0 & imm8) == 0;
}

:tst.b "#"imm8,@(R0,GBR) is (n1=0xc & n2=0xc & imm8 & R0 & GBR)
{
	T = (*:1 (R0 + GBR) & imm8) == 0;
}

:xor n3_reg,n2_reg is (n1=0x2 & n2_reg & n3_reg & n4=0xa)
{
	n2_reg = n2_reg ^ n3_reg;
}

:xor "#"imm8,R0 is (n1=0xc & n2=0xa & imm8 & R0)
{
	R0 = R0 ^ imm8;
}

:xor.b "#"imm8,@(R0,GBR) is (n1=0xc & n2=0xe & imm8 & R0 & GBR)
{
	*:1 (R0 + GBR) = *:1 (R0 + GBR) ^ imm8;
}

#
# Shift instructions
#

:rotcl n2_reg is (n1=0x4 & n2_reg & n3=0x2 & n4=0x4)
{
	local new_t = (0x80000000 & n2_reg) != 0;

	n2_reg = (n2_reg << 1) | zext(T);

	T = new_t;
}

:rotcr n2_reg is (n1=0x4 & n2_reg & n3=0x2 & n4=0x5)
{
	local new_t = (0x1 & n2_reg) != 0;

	n2_reg = (zext(T) << 31) | (n2_reg >> 1);

	T = new_t;
}

:rotl n2_reg is (n1=0x4 & n2_reg & n3=0x0 & n4=0x4)
{
	local tmp = (0x80000000 & n2_reg) != 0;

	n2_reg = (n2_reg << 1) | zext(tmp);

	T = tmp;
}

:rotr n2_reg is (n1=0x4 & n2_reg & n3=0x0 & n4=0x5)
{
	local tmp = (0x1 & n2_reg) != 0;

	n2_reg = (zext(tmp) << 31) | (n2_reg >> 1);

	T = tmp;
}

@if defined(SH3) || defined(SH4) || defined(SH4A) || defined(SH2A)

:shad n3_reg,n2_reg is (n1=0x4 & n2_reg & n3_reg & n4=0xc)
{
	if (n3_reg s< 0) goto <shift_right>;
	n2_reg = n2_reg << n3_reg;
	goto <done>;
	<shift_right>
	n2_reg = n2_reg s>> n3_reg;
	<done>
}

@endif

:shal n2_reg is (n1=0x4 & n2_reg & n3=0x2 & n4=0x0)
{
	T = (0x80000000 & n2_reg) != 0;

	n2_reg = n2_reg << 1;
}

:shar n2_reg is (n1=0x4 & n2_reg & n3=0x2 & n4=0x1)
{
	T = (0x1 & n2_reg) != 0;

	n2_reg = n2_reg s>> 1;
}

@if defined(SH3) || defined(SH4) || defined(SH4A) || defined(SH2A)

:shld n3_reg,n2_reg is (n1=0x4 & n2_reg & n3_reg & n4=0xd)
{
	if (n3_reg s< 0) goto <shift_right>;
	n2_reg = n2_reg << n3_reg;
	goto <done>;
	<shift_right>
	n2_reg = n2_reg >> n3_reg;
	<done>
}

@endif

:shll n2_reg is (n1=0x4 & n2_reg & n3=0x0 & n4=0x0)
{
	T = (0x80000000 & n2_reg) != 0;

	n2_reg = n2_reg << 1;
}

:shll2 n2_reg is (n1=0x4 & n2_reg & n3=0x0 & n4=0x8)
{
	n2_reg = n2_reg << 2;
}

:shll8 n2_reg is (n1=0x4 & n2_reg & n3=0x1 & n4=0x8)
{
	n2_reg = n2_reg << 8;
}

:shll16 n2_reg is (n1=0x4 & n2_reg & n3=0x2 & n4=0x8)
{
	n2_reg = n2_reg << 16;
}

:shlr n2_reg is (n1=0x4 & n2_reg & n3=0x0 & n4=0x1)
{
	T = (0x1 & n2_reg) != 0;

	n2_reg = n2_reg >> 1;
}

:shlr2 n2_reg is (n1=0x4 & n2_reg & n3=0x0 & n4=0x9)
{
	n2_reg = n2_reg >> 2;
}

:shlr8 n2_reg is (n1=0x4 & n2_reg & n3=0x1 & n4=0x9)
{
	n2_reg = n2_reg >> 8;
}

:shlr16 n2_reg is (n1=0x4 & n2_reg & n3=0x2 & n4=0x9)
{
	n2_reg = n2_reg >> 16;
}

#
# Branch instructions
#

:bf rel_imm8 is (n1=0x8 & n2=0xb & rel_imm8)
{
	if (T != 0) goto inst_next;
	goto rel_imm8;
}

@if defined(SH2) || defined(SH3) || defined(SH4) || defined(SH4A) || defined(SH2A)

:bf^"/s" rel_imm8 is (n1=0x8 & n2=0xf & rel_imm8)
{
	if (T != 0) goto inst_next;
	delayslot(1);
	goto rel_imm8;
}

@endif 

:bt rel_imm8 is (n1=0x8 & n2=0x9 & rel_imm8)
{
	if (T == 0) goto inst_next;
	goto rel_imm8;
}

@if defined(SH2) || defined(SH3) || defined(SH4) || defined(SH4A) || defined(SH2A)

:bt^"/s" rel_imm8 is (n1=0x8 & n2=0xd & rel_imm8)
{
	if (T != 0) goto inst_next;
	delayslot(1);
	goto rel_imm8;
}

@endif 

:bra rel_imm12 is (n1=0xa & rel_imm12)
{
	delayslot(1);
	goto rel_imm12;
}

@if defined(SH2) || defined(SH3) || defined(SH4) || defined(SH4A) || defined(SH2A)

:braf rel_reg is (n1=0x0 & n3=0x2 & n4=0x3 & rel_reg)
{
	delayslot(1);
	goto rel_reg;
}

@endif

:bsr rel_imm12 is (n1=0xb & rel_imm12)
{
	PR = inst_next + 2;
	delayslot(1);
	call rel_imm12;
}

@if defined(SH2) || defined(SH3) || defined(SH4) || defined(SH4A) || defined(SH2A)

:bsrf rel_reg is (n1=0x0 & n3=0x0 & n4=0x3 & rel_reg)
{
	PR = inst_next + 2;
	delayslot(1);
	call rel_reg;
}

@endif

:jmp @n2_reg is (n1=0x4 & n2_reg & n3=0x2 & n4=0xb)
{
	delayslot(1);
	goto [n2_reg];
}

:jsr @n2_reg is (n1=0x4 & n2_reg & n3=0x0 & n4=0xb)
{
	PR = inst_next + 2;
	delayslot(1);
	call [n2_reg];
}

@if defined(SH2A)

:jsr^"/n" @n2_reg is (n1=0x4 & n2_reg & n3=0x4 & n4=0xb)
{
	PR = inst_next + 2;
	call [n2_reg];
}

:jsr^"/n" @(disp8,TBR) is (n1=0x8 & n2=0x3 & disp8 & TBR & tbr_disp8)
{
	PR = inst_next + 2;
	call [tbr_disp8];
}

@endif

:rts is (n1=0x0 & n2=0x0 & n3=0x0 & n4=0xb)
{
	delayslot(1);
	return [PR];
}

@if defined(SH2A)

:rts^"/n" is (n1=0x0 & n2=0x0 & n3=0x6 & n4=0xb)
{
	return [PR];
}

:rtv^"/n" n2_reg is (n1=0x0 & n2_reg & n3=0x7 & n4=0xb)
{
	R0 = n2_reg;
	return [PR];
}

@endif

:clrmac is (n1=0x0 & n2=0x0 & n3=0x2 & n4=0x8)
{
	MACH = 0;
	MACL = 0;
}

@if defined(SH3) || defined(SH4) || defined(SH4A)

:clrs is (n1=0x0 & n2=0x0 & n3=0x4 & n4=0x8)
{
	# unimplemented
}

@endif

:clrt is (n1=0x0 & n2=0x0 & n3=0x0 & n4=0x8)
{
	T = 0;
}

@if defined(SH4A)

:icbi @n2_reg is (n1=0x0 & n2_reg & n3=0xe & n4=0x3)
{
	# unimplemented
}

@endif

@if defined(SH2A)

:ldbank @n2_reg,R0 is (n1=0x4 & n2_reg & n3=0xe & n4=0x5 & R0)
{
	load_register_bank();
}

@endif

macro set_sr(val) {
	local imask = (val & (0xf << 4)) >> 4;

	BO = (val & (1 << 14)) != 0;
	CS = (val & (1 << 13)) != 0;
	M = (val & (1 << 9)) != 0;
	Q = (val & (1 << 8)) != 0;
	IMASK = imask:1;
	S = (val & (1 << 1)) != 0;
	T = (val & (1 << 0)) != 0;
}

:ldc n2_reg,"SR" is (n1=0x4 & n2_reg & n3=0x0 & n4=0xe)
{
	set_sr(n2_reg);
}

:ldc.l @n2_reg+,"SR" is (n1=0x4 & n2_reg & n3=0x0 & n4=0x7)
{
	set_sr(*:4 n2_reg);
	n2_reg = n2_reg + 4;
}

@if defined(SH2A)

:ldc n2_reg,TBR is (n1=0x4 & n2_reg & n3=0x4 & n4=0xa & TBR)
{
	TBR = n2_reg;
}

@endif

:ldc n2_reg,GBR is (n1=0x4 & n2_reg & n3=0x1 & n4=0xe & GBR)
{
	GBR = n2_reg;
}

:ldc.l @n2_reg+,GBR is (n1=0x4 & n2_reg & n3=0x1 & n4=0x7 & GBR)
{
	GBR = *n2_reg;
	n2_reg = n2_reg + 4;
}

:ldc n2_reg,VBR is (n1=0x4 & n2_reg & n3=0x2 & n4=0xe & VBR)
{
	VBR = n2_reg;
}

:ldc.l @n2_reg+,VBR is (n1=0x4 & n2_reg & n3=0x2 & n4=0x7 & VBR)
{
	VBR = *n2_reg;
	n2_reg = n2_reg + 4;
}

# Unimplemented DSP instructions:
# ldc Rm,MOD
# ldc.l @Rm+,MOD
# ldc Rm,RE
# ldc.l @Rm+,RE
# ldc Rm,RS
# ldc.l @Rm+,RS

# Unimplemented SH4A instructions:
# ldc Rm,SGR
# ldc.l @Rm+,SGR
# ldc Rm,SSR
# ldc.l @Rm+,SSR
# ldc Rm,SPC
# ldc.l @Rm+,SPC
# ldc Rm,DBR
# ldc.l @Rm+,DBR
# ldc Rm,Rn_BANK
# ldc.l @Rm+,Rn_BANK

# Unimplemented DSP instructions:
# ldre @(disp,PC)
# ldrs @(disp,PC)

:lds n2_reg,MACH is (n1=0x4 & n2_reg & n3=0x0 & n4=0xa & MACH)
{
	MACH = n2_reg;
}

:lds.l @n2_reg+,MACH is (n1=0x4 & n2_reg & n3=0x0 & n4=0x6 & MACH)
{
	MACH = *n2_reg;
	n2_reg = n2_reg + 4;
}

:lds n2_reg,MACL is (n1=0x4 & n2_reg & n3=0x1 & n4=0xa & MACL)
{
	MACL = n2_reg;
}

:lds.l @n2_reg+,MACL is (n1=0x4 & n2_reg & n3=0x1 & n4=0x6 & MACL)
{
	MACL = *n2_reg;
	n2_reg = n2_reg + 4;
}

:lds n2_reg,PR is (n1=0x4 & n2_reg & n3=0x2 & n4=0xa & PR)
{
	PR = n2_reg;
}

:lds.l @n2_reg+,PR is (n1=0x4 & n2_reg & n3=0x2 & n4=0x6 & PR)
{
	PR = *n2_reg;
	n2_reg = n2_reg + 4;
}

# Unimplemented DSP instructions:
# lds Rm,DSR
# lds.l @Rm+,DSR
# lds Rm,A0
# lds.l @Rm+,A0
# lds Rm,X0
# lds.l @Rm+,X0
# lds Rm,X1
# lds.l @Rm+,X1
# lds Rm,Y0
# lds.l @Rm+,Y0
# lds Rm,Y1
# lds.l @Rm+,Y1

# SH3/SH4/SH4A
# ldtbl
# SH4/SH4A
# movca.l R0,@Rn

:nop is (n1=0x0 & n2=0x0 & n3=0x0 & n4=0x9)
{
}

# Unimplemented SH4/SH4A instructions
# ocbi @Rn
# ocbp @Rn
# ocbwb @Rn

:pref @n2_reg is (n1=0x0 & n2_reg & n3=0x8 & n4=0x3)
{
	prefetch_cache();
}

# Unimplemented SH4A instructions
# prefi @Rn

:resbank is (n1=0x0 & n2=0x0 & n3=0x5 & n4=0xb)
{
	restore_register_bank();
}

:rte is (n1=0x0 & n2=0x0 & n3=0x2 & n4=0xb)
{
	delayslot(1);

	PC = *R15;
	R15 = R15 + 4;
	PR = *R15;
	R15 = R15 + 4;
}

# Unimplemented DSP instructions:
# setrc Rn
# setrc #imm

# Unimplemented SH3/SH4/SH4A instruction:
# sets

:sett is (n1=0x0 & n2=0x0 & n3=0x1 & n4=0x8)
{
	T = 1;
}

:sett is (n1=0x0 & n2=0x0 & n3=0x1 & n4=0xb)
{
	sleep();
}

:stbank R0,@n2_reg is (n1=0x4 & n2_reg & n3=0xe & n4=0x1 & R0)
{
	save_register_bank();
}

macro get_sr(result) {
	local tmp_BO:4 = zext(BO) << 14;
	local tmp_CS:4 = zext(CS) << 13;
	local tmp_M:4 = zext(M) << 9;
	local tmp_Q:4 = zext(Q) << 8;
	local tmp_IMASK:4 = zext(IMASK) << 4;
	local tmp_S:4 = zext(S) << 1;
	local tmp_T:4 = zext(T);

	result = tmp_BO | tmp_CS | tmp_M | tmp_Q | tmp_IMASK | tmp_S | tmp_T;
}

:stc "SR",n2_reg is (n1=0x0 & n2_reg & n3=0x0 & n4=0x2)
{
	get_sr(n2_reg);
}

:stc.l "SR",@-n2_reg is (n1=0x4 & n2_reg & n3=0x0 & n4=0x3)
{
	n2_reg = n2_reg - 4;
	local tmp:4;
	get_sr(tmp);
	*:4 n2_reg = tmp;
}

@if defined(SH2A)

:stc TBR,n2_reg is (n1=0x0 & n2_reg & n3=0x4 & n4=0xa & TBR)
{
	n2_reg = TBR;
}

@endif

:stc GBR,n2_reg is (n1=0x0 & n2_reg & n3=0x1 & n4=0x2 & GBR)
{
	n2_reg = GBR;
}

:stc.l GBR,@-n2_reg is (n1=0x4 & n2_reg & n3=0x1 & n4=0x3 & GBR)
{
	n2_reg = n2_reg - 4;
	*n2_reg = GBR;
}

:stc VBR,n2_reg is (n1=0x0 & n2_reg & n3=0x2 & n4=0x2 & VBR)
{
	n2_reg = VBR;
}

:stc.l VBR,@-n2_reg is (n1=0x4 & n2_reg & n3=0x2 & n4=0x3 & VBR)
{
	n2_reg = n2_reg - 4;
	*n2_reg = VBR;
}

# Unimplemented DSP instructions:
# stc MOD,Rm
# stc.l MOD,@Rm+
# stc RE,Rm
# stc.l RE,@Rm+
# stc RS,Rm
# stc.l RS,@Rm+

# Unimplemented SH4A instructions:
# stc SGR,Rm
# stc.l SGR,@Rm+
# stc SSR,Rm
# stc.l SSR,@Rm+
# stc SPC,Rm
# stc.l SPC,@Rm+
# stc DBR,Rm
# stc.l DBR,@Rm+
# stc Rn_BANK,Rm
# stc.l Rn_BANK,@Rm+

:sts MACH,n2_reg is (n1=0x0 & n2_reg & n3=0x0 & n4=0xa & MACH)
{
	n2_reg = MACH;
}

:sts.l MACH,@-n2_reg is (n1=0x4 & n2_reg & n3=0x0 & n4=0x2 & MACH)
{
	n2_reg = n2_reg - 4;
	*n2_reg = MACH;
}

:sts MACL,n2_reg is (n1=0x0 & n2_reg & n3=0x1 & n4=0xa & MACL)
{
	MACL = n2_reg;
}

:sts.l MACL,@-n2_reg is (n1=0x4 & n2_reg & n3=0x1 & n4=0x2 & MACL)
{
	n2_reg = n2_reg - 4;
	*n2_reg = MACL;
}

:sts PR,n2_reg is (n1=0x0 & n2_reg & n3=0x2 & n4=0xa & PR)
{
	n2_reg = PR;
}

:sts.l PR,@-n2_reg is (n1=0x4 & n2_reg & n3=0x2 & n4=0x2 & PR)
{
	n2_reg = n2_reg - 4;
	*n2_reg = PR;
}

# Unimplemented DSP instructions:
# sts DSR,Rm
# sts.l DSR,@Rm+
# sts A0,Rm
# sts.l A0,@Rm+
# sts X0,Rm
# sts.l X0,@Rm+
# sts X1,Rm
# sts.l X1,@Rm+
# sts Y0,Rm
# sts.l Y0,@Rm+
# sts Y1,Rm
# sts.l Y1,@Rm+

:trapa "#"imm8 is (n1=0xc & n2=0x3 & imm8)
{
	trap();
}
